"""games_records_list

Revision ID: 7d0de3a9a63d
Revises: 7a97f645165d
Create Date: 2024-05-07 22:48:13.705957

"""

import json
from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "7d0de3a9a63d"
down_revision: Union[str, None] = "7a97f645165d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    res = conn.execute(
        sa.text("SELECT id, type, records FROM pwsi.games WHERE records IS NOT NULL;")
    )
    result = res.fetchall()

    updated_data = []
    for game in result:
        updated_data.append(
            {
                "id": game[0],
                "records": json.dumps(
                    [
                        {
                            "name": "Демо" if game[1] == "demo" else "Прохождение",
                            "url": game[2],
                        }
                    ],
                    ensure_ascii=False,
                ),
            }
        )

    op.drop_column(
        "games",
        "records",
        schema="pwsi",
    )
    op.add_column(
        "games", sa.Column("records", sa.JSON(), nullable=True), schema="pwsi"
    )

    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column(
    #     "games",
    #     "records",
    #     existing_type=sa.VARCHAR(),
    #     type_=sa.JSON(),
    #     existing_nullable=True,
    #     schema="pwsi",
    # )
    # ### end Alembic commands ###

    for game in updated_data:
        conn.execute(
            sa.text(
                f"UPDATE pwsi.games SET records = '{game['records']}' WHERE id = {game['id']};"
            )
        )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "games",
        "records",
        existing_type=sa.JSON(),
        type_=sa.VARCHAR(),
        existing_nullable=True,
        schema="pwsi",
    )
    # ### end Alembic commands ###

    conn = op.get_bind()
    res = conn.execute(
        sa.text("SELECT id, records FROM pwsi.games WHERE records IS NOT NULL;")
    )
    result = res.fetchall()

    updated_data = []
    were_multiple_records = False
    for game in result:
        records = json.loads(game[1])
        if len(records) > 1:
            were_multiple_records = True
            records_string = ";;".join(
                record["name"] + "::" + record["url"] for record in records
            )
        else:
            records_string = ";;".join(record["url"] for record in records)
        updated_data.append({"id": game[0], "records": records_string})
    for game in updated_data:
        conn.execute(
            sa.text(
                f"UPDATE pwsi.games SET records = '{game['records']}' WHERE id = {game['id']};"
            )
        )

    if were_multiple_records:
        print("THERE WERE MULTIPLE RECORDS FOR GAME, PLEASE CHECK")
