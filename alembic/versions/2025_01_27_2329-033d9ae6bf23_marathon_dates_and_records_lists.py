"""marathon dates and records_lists

Revision ID: 033d9ae6bf23
Revises: 2e630d773e10
Create Date: 2025-01-27 23:29:42.954414

"""

import json
from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "033d9ae6bf23"
down_revision: Union[str, None] = "2e630d773e10"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    res_challenges = conn.execute(
        sa.text("SELECT id, records FROM pwsi.challenges WHERE records IS NOT NULL;")
    )
    result_challenges = res_challenges.fetchall()

    res_marathons = conn.execute(
        sa.text("SELECT id, records FROM pwsi.marathons WHERE records IS NOT NULL;")
    )
    result_marathons = res_marathons.fetchall()

    updated_data_challenges = []
    for challenge in result_challenges:
        updated_data_challenges.append(
            {
                "id": challenge[0],
                "records": json.dumps(
                    [
                        {
                            "name": "Прохождение",
                            "url": challenge[1],
                        }
                    ],
                    ensure_ascii=False,
                ),
            }
        )

    updated_data_marathons = []
    for marathon in result_marathons:
        updated_data_marathons.append(
            {
                "id": marathon[0],
                "records": json.dumps(
                    [
                        {
                            "name": "Прохождение",
                            "url": marathon[1],
                        }
                    ],
                    ensure_ascii=False,
                ),
            }
        )

    op.drop_column(
        "challenges",
        "records",
        schema="pwsi",
    )
    op.drop_column(
        "marathons",
        "records",
        schema="pwsi",
    )
    op.add_column(
        "challenges", sa.Column("records", sa.JSON(), nullable=True), schema="pwsi"
    )
    op.add_column(
        "marathons", sa.Column("records", sa.JSON(), nullable=True), schema="pwsi"
    )

    for challenge in updated_data_challenges:
        conn.execute(
            sa.text(
                f"UPDATE pwsi.challenges SET records = '{challenge['records']}' WHERE id = {challenge['id']};"
            )
        )

    for marathon in updated_data_marathons:
        conn.execute(
            sa.text(
                f"UPDATE pwsi.marathons SET records = '{marathon['records']}' WHERE id = {marathon['id']};"
            )
        )

    # op.alter_column(
    #     "challenges",
    #     "records",
    #     existing_type=sa.VARCHAR(),
    #     type_=sa.JSON(),
    #     existing_nullable=True,
    #     schema="pwsi",
    # )
    op.add_column(
        "marathons",
        sa.Column("date_start", sa.Date(), nullable=True),
        schema="pwsi",
    )
    op.add_column(
        "marathons",
        sa.Column("date_end", sa.Date(), nullable=True),
        schema="pwsi",
    )
    # op.alter_column(
    #     "marathons",
    #     "records",
    #     existing_type=sa.VARCHAR(),
    #     type_=sa.JSON(),
    #     existing_nullable=True,
    #     schema="pwsi",
    # )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "marathons",
        "records",
        existing_type=sa.JSON(),
        type_=sa.VARCHAR(),
        existing_nullable=True,
        schema="pwsi",
    )
    op.drop_column("marathons", "date_end", schema="pwsi")
    op.drop_column("marathons", "date_start", schema="pwsi")
    op.alter_column(
        "challenges",
        "records",
        existing_type=sa.JSON(),
        type_=sa.VARCHAR(),
        existing_nullable=True,
        schema="pwsi",
    )

    conn = op.get_bind()
    res_challenges = conn.execute(
        sa.text("SELECT id, records FROM pwsi.challenges WHERE records IS NOT NULL;")
    )
    result_challenges = res_challenges.fetchall()

    res_marathons = conn.execute(
        sa.text("SELECT id, records FROM pwsi.marathons WHERE records IS NOT NULL;")
    )
    result_marathons = res_marathons.fetchall()

    were_multiple_records = False

    updated_data_challenges = []
    for challenge in result_challenges:
        records = json.loads(challenge[1])
        if len(records) > 1:
            were_multiple_records = True
            records_string = ";;".join(
                record["name"] + "::" + record["url"] for record in records
            )
        else:
            records_string = ";;".join(record["url"] for record in records)
        updated_data_challenges.append({"id": challenge[0], "records": records_string})
    for challenge in updated_data_challenges:
        conn.execute(
            sa.text(
                f"UPDATE pwsi.challenges SET records = '{challenge['records']}' WHERE id = {challenge['id']};"
            )
        )

    updated_data_marathons = []
    for marathon in result_marathons:
        records = json.loads(marathon[1])
        if len(records) > 1:
            were_multiple_records = True
            records_string = ";;".join(
                record["name"] + "::" + record["url"] for record in records
            )
        else:
            records_string = ";;".join(record["url"] for record in records)
        updated_data_marathons.append({"id": marathon[0], "records": records_string})
    for marathon in updated_data_marathons:
        conn.execute(
            sa.text(
                f"UPDATE pwsi.marathons SET records = '{marathon['records']}' WHERE id = {marathon['id']};"
            )
        )

    if were_multiple_records:
        print(
            "THERE WERE MULTIPLE RECORDS FOR CHALLENGES OR(AND) MARATHONS, PLEASE CHECK"
        )

    # ### end Alembic commands ###
